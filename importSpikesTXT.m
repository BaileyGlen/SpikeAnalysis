function spikeDataset = importSpikesTXT(filename)
        %importSpikesTXT Import numeric data from a text file as a matrix.
        %   spikeDataset = importSpikesTXT(FILENAME) Reads data from text file FILENAME for
        %   the default selection.
        %
        %   spikeDataset = importSpikesTXT(FILENAME, STARTROW, ENDROW) Reads data from rows
        %   STARTROW through ENDROW of text file FILENAME.
        %
        % Example:
        %   spikeDataset = importSpikesTXT('2014-12-12_M16_RRRI_01.txt', 2, 327875);
        %
        %    See also TEXTSCAN.
        
        % Auto-generated by MATLAB on 2016/03/18 09:56:46
        
        %% Initialize variables.
        delimiter = ',';
        if nargin<=2
            startRow = 1;
            endRow = inf;
        end
        
        %% Format string for each line of text:
        %   column1: double (%f)
        %	column2: double (%f)
        %   column3: double (%f)
        % For more information, see the TEXTSCAN documentation.
        formatSpec = '%f%f%f%[^\n\r]';
        
        %% Open the text file.
        fileID = fopen(filename,'r');
        assert(fileID>=3, 'Did not Open Correctly');
        headerList  = strsplit(fgetl(fileID),delimiter);
        if ~any(strcmp('Channel',headerList))
            headerList = {'Channel', 'Unit', 'Timestamp'};
            frewind(fileID);
        end
%        headerList = parseHeader(temptext, headerCell);
%         
%         function list = parseHeader(fileHeaders, templateHeaders)
%             list = cellfun(@(x) find(strcmp(x,fileHeaders)),templateHeaders, ...
%                 'UniformOutput', false);
%             assert(~isempty(list), ...
%                 ['Not all templateHeaders were found in the fileHeader.' ...
%                 'Is there a header?']);
%         end
        %% Read columns of data according to format string.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
        for block=2:length(startRow)
            frewind(fileID);
            dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
            for col=1:length(dataArray)
                dataArray{col} = [dataArray{col};dataArrayBlock{col}];
            end
        end

        %% Close the text file.
        fclose(fileID);
        
        %% Post processing for unimportable data.
        % No unimportable data rules were applied during the import, so no post
        % processing code is included. To generate code which works for
        % unimportable data, select unimportable cells in a file and regenerate the
        % script.
        
        %% Create output variable
        spikeDataset = dataset(dataArray{1:end-1}, 'VarNames', headerList);
        spikeDataset.UID =  nominal(str2num([num2str(spikeDataset.Channel) num2str(spikeDataset.Unit)]));
    end